version: 2.1
commands:
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow-id:
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
      project:
        type: string
        default: "udapeople" 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow-id >> "
            aws s3 rm s3://udapeople-<<parameters.workflow-id>> --recursive
            aws cloudformation delete-stack --stack-name <<parameters.project>>-backend-<<parameters.workflow-id>>
            aws cloudformation delete-stack --stack-name <<parameters.project>>-frontend-<<parameters.workflow-id>>
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow-id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            export SUCCESS=$(curl --insecure https://kvdb.io/WEMAhgLdFSm2FeCVwC28h3/migration_<<parameters.workflow-id>>)
            if (( $SUCCESS==1 )); 
            then
            cd ~/project/backend
            npm install
            npm run build
            npm run migrations:revert
            fi
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install
            npm run test            
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test   
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - run:
          name: Scan backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
            root: ~/
            paths:
              - project/.circleci/ansible/inventory.txt
      - destroy-environment    

  configure-infrastructure:
    docker: 
      - image: python:3.10-alpine3.16
    steps:      
      - checkout
      - add_ssh_keys:
          fingerprints: [56:8e:7e:7d:6d:ee:4d:e3:e0:f3:64:a2:00:ac:f7:21]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: | 
            apk add --update --no-cache ansible tar gzip aws-cli openssh
      - run:
          name: Configure server
          no_output_timeout: 20m
          command: |
            pwd
            cd .circleci/ansible
            ls -al
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment      
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl -k https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi 
      - destroy-environment
      
  deploy-frontend:
    docker: 
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm aws-cli curl
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment    
      - revert-migrations                
  deploy-backend:
    docker: 
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "56:8e:7e:7d:6d:ee:4d:e3:e0:f3:64:a2:00:ac:f7:21"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache ansible tar gzip nodejs npm aws-cli curl
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            cd .. 
            tar -C backend -czvf artifact.tar.gz .            
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is ......"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations
  smoke-test:
    docker: 
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm curl aws-cli
      - run:
          name: Get backend url and backend smoke test
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            echo ${BACKEND_IP}
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=${API_URL}"
            echo 'Sleeping for 1 minute'
            sleep 60
            if curl -v "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi      
      - destroy-environment
      - revert-migrations
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install tar gzip -y
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text | grep -o '[^-]*$' )
            echo $OldWorkflowID >> ~/project/OldWorkflowID.txt
            cat ~/project/OldWorkflowID.txt
      - persist_to_workspace:
            root: ~/
            paths:
              - project/OldWorkflowID.txt
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
            echo OldWorkflowID: cat ~/project/OldWorkflowID.txt
            echo CurrentWorkflowID: "${CIRCLE_WORKFLOW_ID:0:7}"      
      - destroy-environment
      - revert-migrations 

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - attach_workspace:
          at: ~/      
      - run:
          name: Get old stack workflow id 
          command: |
            export STACKS=($(aws cloudformation list-stacks \
              --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE \
              --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"
            export OldWorkflowID=$(cat ~/project/OldWorkflowID.txt)
            echo OldWorkflowID: "${OldWorkflowID}"
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(cat ~/project/OldWorkflowID.txt)
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
              echo "Deleting old stack"
              echo "s3://udapeople-${OldWorkflowID}"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive || true 
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}" || true
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}" || true
            else
              echo "Stack is the latest"
            fi
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
